{
	"Next.js": {
		"title": "Next.js",
		"components": [
			{
				"name": "App",
				"category": "Next.js",
				"description": "Connect Next.js to Redux. Create state store. Get data from index page component and send to state store via reducers. Used by Next.js in transpilation; overrides default Next.js _app.",
				"smart": false,
				"path": "/src/pages/_app.js"
			},
			{
				"name": "Document",
				"category": "Next.js",
				"description": "Collect and handle styles from styled-components. Render &lt;html>.\n\nUsed by Next.js in transpilation; overrides default Next.js _document.",
				"smart": false,
				"path": "/src/pages/_document.js"
			},
			{
				"name": "Index",
				"category": "Next.js",
				"description": "Fetch data and send it to _app. Render Container component.\n\nUsed by Next.js whenever /index is requested.",
				"smart": true,
				"path": "/src/pages/index.js",
				"params": [
					{
						"name": "s",
						"description": "URL param indicating which screen is requested.",
						"parent": "Index",
						"type": "string"
					},
					{
						"name": "p",
						"description": "URL param indicating which partial screen is requested.",
						"parent": "Index",
						"type": "string"
					},
					{
						"name": "u",
						"description": "URL param indicating current user's account name. \nE.g., \"sp1\". SPO sets correct current user, even if the wrong user was entered.",
						"parent": "Index",
						"type": "string"
					},
					{
						"name": "o",
						"description": "URL param indicating an account name that should be used \ninstead of the current user's account name. If the current user does not have \npermission to emulate another user, this param will be ignored.",
						"parent": "Index",
						"type": "string"
					}
				]
			}
		]
	},
	"Ingredients": {
		"title": "Ingredients",
		"preamble": "Items such as controls that appear across other parts of the app.",
		"components": [
			{
				"name": "Button",
				"category": "Ingredients",
				"description": "Button. Connected to Redux store.",
				"smart": true,
				"path": "/src/components/Ingredients/Button/Button.js",
				"params": [
					{
						"name": "backgroundColor",
						"description": "Color of background. Style service param. \nReminder: may be transparent. E.g., \"bold-pink\".",
						"type": "string",
						"parent": "Button"
					},
					{
						"name": "clickHandler",
						"description": "Function executed when button is clicked. E.g., () => handleClick(...params).",
						"type": "string",
						"parent": "Button"
					},
					{
						"name": "contentColor",
						"description": "Color of text and/or icon. Style service param. E.g., \"primary-green\".",
						"type": "string",
						"parent": "Button"
					},
					{
						"name": "contentHeightInRem",
						"description": "Height of button's text and/or icon, measured in rem. E.g., \"3\".",
						"type": "string",
						"parent": "Button",
						"default": "Style.FontSize('m', screenSize).slice(0, -3)"
					},
					{
						"name": "elevationLevel",
						"description": "Elevation level. Style service param. E.g., \"4\".",
						"type": "string",
						"parent": "Button"
					},
					{
						"name": "heightInRem",
						"description": "Height of button, measured in rem. E.g., \"5\".",
						"type": "string",
						"parent": "Button",
						"required": true
					},
					{
						"name": "marginInRem",
						"description": "Margin size, measured in rem, to be applied to all sides of button. E.g., \"2\".",
						"type": "string",
						"parent": "Button"
					},
					{
						"name": "screenSize",
						"description": "Current screen size token. E.g., \"small\".",
						"type": "string",
						"parent": "Button",
						"smart": true
					},
					{
						"name": "text",
						"description": "Text content of button. E.g., \"Button Text\".",
						"type": "string",
						"parent": "Button",
						"required": true
					},
					{
						"name": "textInvisible",
						"description": "Indicates that text should be hidden from sight \n(but will remain available to assistive technologies). E.g., \"true\".",
						"type": "bool",
						"parent": "Button"
					},
					{
						"name": "widthInRem",
						"description": "Width of button, measured in rem. E.g., \"15\".",
						"type": "string",
						"parent": "Button",
						"required": true
					}
				]
			},
			{
				"name": "Icon",
				"category": "Ingredients",
				"description": "Icon component. Gets icon content from Icon Registry.",
				"smart": true,
				"path": "/src/components/Ingredients/Icon/Icon.js",
				"params": [
					{
						"name": "contentColor",
						"description": "Fill color for SVG. Style service param. E.g., \"ux-pink\".",
						"type": "string",
						"parent": "Icon",
						"default": "ux-base-text"
					},
					{
						"name": "contentHeightInRem",
						"description": "Height of icon, measured in rem. E.g., \"4\".",
						"type": "string",
						"parent": "Icon",
						"required": true
					},
					{
						"name": "darkMode",
						"description": "Whether user prefers dark mode. E.g., true.",
						"type": "bool",
						"parent": "Icon",
						"smart": true
					},
					{
						"name": "iconContent",
						"description": "Which SVG should be used. E.g., \"Home\".",
						"type": "string",
						"parent": "Icon",
						"required": true
					}
				]
			}
		]
	}
}